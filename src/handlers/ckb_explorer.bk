async fn proxy_request(
    method: &str,
    network: &str,
    path: &str,
    body: Option<String>,
) -> Result<HttpResponse, AppError> {
    let ckb_api_url: String = if network == "testnet" {
        get_explorer_api_url(NetworkType::Testnet)
    } else {
        get_explorer_api_url(NetworkType::Mainnet)
    };
    let endpoint: String = format!("{}/{}", ckb_api_url, path.to_owned());

    let mut easy = Easy::new();
    easy.url(&endpoint)
        .map_err(|err| AppError::new(500).message(&err.to_string()))?;

    match method {
        "GET" => easy.get(true).unwrap(),
        "POST" => easy.post(true).unwrap(),
        "PUT" => easy.put(true).unwrap(),
        _ => return Err(AppError::new(500).message("Method not allowed")),
    };

    let mut headers = List::new();
    headers
        .append("Accept: application/vnd.api+json")
        .map_err(|err| AppError::new(500).message(&err.to_string()))?;
    headers
        .append("Content-Type: application/vnd.api+json")
        .map_err(|err| AppError::new(500).message(&err.to_string()))?;

    headers
        .append("User-Agent: curl/7.68.0")
        .map_err(|err| AppError::new(500).message(&err.to_string()))?;

    easy.http_headers(headers)
        .map_err(|err| AppError::new(500).message(&err.to_string()))?;

    if let Some(body_content) = body {
        easy.post_fields_copy(body_content.as_bytes())
            .map_err(|err| AppError::new(500).message(&err.to_string()))?;
    }

    let mut data = Vec::new();
    {
        let mut transfer = easy.transfer();
        transfer
            .write_function(|new_data| {
                data.extend_from_slice(new_data);
                Ok(new_data.len())
            })
            .map_err(|err| AppError::new(500).message(&err.to_string()))?;

        transfer
            .perform()
            .map_err(|err| AppError::new(500).message(&err.to_string()))?;
    }

    let response_str =
        str::from_utf8(&data).map_err(|err| AppError::new(500).message(&err.to_string()))?;

    println!("{}", response_str);
    let result: Value = serde_json::from_str(response_str)
        .map_err(|err| AppError::new(500).message(&err.to_string()))?;

    Ok(HttpResponse::Ok().json(result))
}
